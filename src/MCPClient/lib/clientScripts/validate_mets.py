#!/usr/bin/env python
# -*- coding: utf8

"""validate_mets.py

Validate METS/PREMIS generated by Generate METS XML scripts during ingest.
"""

from __future__ import absolute_import, unicode_literals

import lxml
import sys

import metsrw


def concurrent_instances():
    return 1


class ValidateMETSException(Exception):
    """Exception to raise if METS validation fails."""


def _validate_mets(job, mets):
    """Validate the supplied METS file."""
    OFFLINE_ERR = "The QName value '{http://www.w3.org/1999/xlink}simpleLink' does not resolve to a(n) attribute group definition."
    try:
        is_valid, report = metsrw.xsd_validate(mets.serialize())
        if is_valid:
            job.pyprint("METS validation via schema is valid.")
        else:
            job.pyprint("Validation result:", is_valid, file=sys.stderr)
            job.pyprint("Reason:", report, file=sys.stderr)
            raise ValidateMETSException()
    except lxml.etree.XMLSchemaParseError as e:
        if OFFLINE_ERR in str(e):
            job.pyprint("Archivematica may be off-line, so ignoring validation")
        else:
            job.pyprint(e, file=sys.stderr)
            ValidateMETSException(e)


def load_and_validate_mets(job):
    """Load METS from file and then run validation."""
    try:
        mets = metsrw.METSDocument.fromfile(job.args[1])
    except (lxml.etree.XMLSyntaxError, AttributeError) as e:
        job.pyprint("METS raised an exception:", e, file=sys.stderr)
        raise ValidateMETSException(e)
    except IOError as e:
        job.pyprint("File does not exist", e, file=sys.stderr)
        raise ValidateMETSException(e)
    _validate_mets(job, mets)


def call(jobs):
    """Primary entry point for this script.

    Script simply receives the path to the AIP file as an argument.

        \"%SIPDirectory%METS.%SIPUUID%.xml\"

        sudo docker-compose run --workdir /src/MCPClient \
            --rm --entrypoint=py.test archivematica-mcp-client \
            -p no:cacheprovider \
            -p no:warnings \
            --reuse-db \
            -v tests/test_validate_mets.py
    """
    for job in jobs:
        with job.JobContext():
            load_and_validate_mets(job)
