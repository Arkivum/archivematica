#!/usr/bin/env python
# -*- coding: utf8

"""validate_mets.py

Validate METS/PREMIS generated by Generate METS XML scripts during ingest.
"""

from __future__ import absolute_import, unicode_literals

import os
import sys


def concurrent_instances():
    return 1


def call(jobs):
    """Primary entry point for this script."""
    for job in jobs:
        """do something..."""
        with job.JobContext():
            job.pyprint("Number of jobs:", len(jobs))
            job.pyprint("Job name", job.name)
            job.pyprint("Job UUID", job.UUID)
            job.pyprint("Job caller wants output", job.caller_wants_output)
            job.pyprint("Job code", job.int_code)
            job.pyprint("Job status code", job.status_code)

            job.pyprint("Job args length", len(job.args))

            job.pyprint("---")

            """
            A small sample of dictionary values:
                \"%SIPDirectory%\"
                \"%SIPDirectory%METS.%SIPUUID%.xml\"
                \"%SIPType%\"
                \"%SIPLogsDirectory%\"
                \"%SIPObjectsDirectory%\"
                \"%rejectedDirectory%\"
                \"%watchDirectoryPath%\"
                \"%fileGrpUse%\"
                \"%currentLocation%\"
            """

            job.pyprint("%SIPDirectory%:", job.args[1])
            job.pyprint("%SIPDirectory%METS.%SIPUUID%.xml:", job.args[2])
            job.pyprint("%SIPType%:", job.args[3])
            job.pyprint("%SIPLogsDirectory%:", job.args[4])
            job.pyprint("%SIPObjectsDirectory%:", job.args[5])
            job.pyprint("%rejectedDirectory%:", job.args[6])
            job.pyprint("%watchDirectoryPath%:", job.args[7])
            job.pyprint("%fileGrpUse%:", job.args[8])
            job.pyprint("%currentLocation%:", job.args[9])

            job.pyprint(
                "Lets generate some system logging too: AIP path exists?",
                os.path.exists(job.args[2]),
                file=sys.stderr,
            )
            job.pyprint(
                "Lets generate some system logging too: logs directory exists?",
                os.path.exists(job.args[4]),
                file=sys.stderr,
            )
            job.pyprint(
                "Lets generate some system logging too: rejected directory exists?",
                os.path.exists(job.args[6]),
                file=sys.stderr,
            )
            job.pyprint(
                "Lets generate some system logging too: current location exists?",
                os.path.exists(job.args[9]),
                file=sys.stderr,
            )
