[build-system]
requires = [
  "setuptools>=69",
  "wheel>=0.42",
]
build-backend = "setuptools.build_meta"

[project]
name = "archivematica"
dynamic = [
  "version",
  "readme",
]
description = "Web- and standards-based, open-source application which allows your institution to preserve long-term access to trustworthy, authentic and reliable digital content."
requires-python = ">=3.8"
license = {file = "LICENSE"}
dependencies = [
  "agentarchives",
  "amclient",
  "ammcpc",
  "bagit",
  "brotli",
  "clamd",
  "django-auth-ldap",
  "django-autoslug",
  "django-cas-ng",
  "django-csp",
  "django-forms-bootstrap",
  "django-prometheus",
  "django-shibboleth-remoteuser@git+https://github.com/Brown-University-Library/django-shibboleth-remoteuser#egg=962f6f9818683ef5f6432f091d22945e54b82592",
  "django-tastypie",
  "django>=4.2,<5",
  "elasticsearch>=6.0.0,<7.0.0",
  "gearman3@git+https://github.com/artefactual-labs/python-gearman.git#egg=b68efc868c7a494dd6a2d2e820fb098a6da9f797",
  "gevent",
  "gunicorn",
  "importlib-metadata",
  "inotify_simple",
  "jsonschema",
  "lazy-paged-sequence",
  "lxml",
  "metsrw",
  "mozilla-django-oidc",
  "opf-fido",
  "prometheus_client",
  "python-dateutil",
  "python-ldap",
  "requests",
  "unidecode",
  "whitenoise",
]
keywords = [
  "archivematica",
  "preservation",
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Web Environment",
  "Framework :: Django :: 4.2",
  "Intended Audience :: Information Technology",
  "License :: OSI Approved :: GNU Affero General Public License v3",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
authors = [
  {name = "Artefactual Systems Inc.", email = "info@artefactual.com"}
]
maintainers = [
  {name = "Artefactual Systems Inc.", email = "info@artefactual.com"}
]

[project.urls]
homepage = "https://www.archivematica.org/"
documentation = "https://www.archivematica.org/en/docs/latest/"
repository = "https://github.com/artefactual/archivematica"
issues = "https://github.com/archivematica/Issues/issues"

[project.optional-dependencies]
dev = [
  "coverage",
  "mockldap@git+https://github.com/artefactual-labs/mockldap#egg=v0.3.1",
  "pip-tools",
  "pytest-cov",
  "pytest-django",
  "pytest-mock",
  "pytest-randomly",
  "pytest",
  "tox",
]

[tool.setuptools.dynamic]
# XXX
version = {attr = "common.version.ARCHIVEMATICA_VERSION_STR"}
readme = {file = ["README.md"], content-type = "text/markdown"}

[tool.pytest.ini_options]
addopts = "--reuse-db -p no:cacheprovider"
django_find_projects = false
DJANGO_SETTINGS_MODULE = "settings.test"
# XXX
norecursedirs = ".svn _build tmp* node_modules bower_components share .tox"
python_files = [
  "test_*.py",
]
# XXX
# testpaths = [
#  "tests",
# ]

[tool.coverage.run]
source = [
  "**/src/common/",
  "**/src/dashboard/",
  "**/src/mcpclient/",
  "**/src/mcpclient/clientScripts/",
  "**/src/mcpserver/",
]
branch = true
omit = [
  "**/src/common/externals/*",
  "**/migrations/*",
  "**/south_migrations/*",
  "**/management/commands/*",
  "**/settings/*",
  "**/tests/*",
  "**/wsgi.py",
  "**/manage.py",
]

[tool.tox]
legacy_tox_ini = """
    [tox]
    skipsdist = True
    envlist =
        common
        dashboard
        mcp-server
        mcp-client
        mcp-client-ensure-no-mutable-globals
        storage-service
        migrations-dashboard
        migrations-storage-service
        linting

    [testenv]
    skip_install = True
    deps = -r{toxinidir}/requirements-dev.txt
    commands = py.test {posargs} tests/mcpclient
    allowlist_externals =
        bash
        find
    setenv =
        # General
        LOGNAME = user
        DJANGO_SETTINGS_MODULE = {env:DJANGO_SETTINGS_MODULE:settings.test}
        PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:}
        SRC_DIR = {toxinidir}/src
        HACK_DIR = {toxinidir}/hack
        # Archivematica Common
        ARCHIVEMATICA_COMMON_ROOT = {env:SRC_DIR}/common
        ARCHIVEMATICA_COMMON_DIR = {env:ARCHIVEMATICA_COMMON_ROOT}
        # Dashboard
        DASHBOARD_ROOT = {env:SRC_DIR}/dashboard
        DASHBOARD_DIR = {env:DASHBOARD_ROOT}
        DASHBOARD_PYTHONPATH = {env:DASHBOARD_DIR}:{env:ARCHIVEMATICA_COMMON_DIR}
        # MCP Server
        MCPSERVER_ROOT = {env:SRC_DIR}/mcpserver
        MCPSERVER_DIR = {env:MCPSERVER_ROOT}
        MCPSERVER_PYTHONPATH = {env:MCPSERVER_DIR}:{env:ARCHIVEMATICA_COMMON_DIR}:{env:DASHBOARD_DIR}
        # MCP Client
        MCPCLIENT_ROOT = {env:SRC_DIR}/mcpclient
        MCPCLIENT_DIR = {env:MCPCLIENT_ROOT}
        MCPCLIENT_PYTHONPATH = {env:MCPCLIENT_DIR}:{env:MCPCLIENT_DIR}/clientScripts:{env:ARCHIVEMATICA_COMMON_DIR}:{env:DASHBOARD_DIR}
        # Storage Service
        STORAGE_SERVICE_ROOT = {env:HACK_DIR}/submodules/archivematica-storage-service
        STORAGE_SERVICE_DIR = {env:STORAGE_SERVICE_ROOT}/storage_service
        STORAGE_SERVICE_PYTHONPATH = {env:STORAGE_SERVICE_DIR}:{env:STORAGE_SERVICE_DIR}/storage_service
        # TOXENV-specific
        common: PYTHONPATH = {env:DASHBOARD_PYTHONPATH}
        dashboard: PYTHONPATH = {env:DASHBOARD_PYTHONPATH}
        mcp-server: PYTHONPATH = {env:MCPSERVER_PYTHONPATH}
        mcp-client: PYTHONPATH = {env:MCPCLIENT_PYTHONPATH}
        storage-service: PYTHONPATH = {env:STORAGE_SERVICE_PYTHONPATH}
        migrations-dashboard: PYTHONPATH = {env:DASHBOARD_PYTHONPATH}
        migrations-storage-service: PYTHONPATH = {env:STORAGE_SERVICE_PYTHONPATH}
        # Setting HOME prevents Python's pwd module to ask for a real uid inside
        # the container, and using {temp_dir} allows caching the pre-commit and flake8
        # dependencies in the tox host
        linting: HOME = {temp_dir}/user
    changedir =
        storage-service: {env:STORAGE_SERVICE_DIR}

    [testenv:mcp-client-ensure-no-mutable-globals]
    commands = python {env:MCPCLIENT_DIR}/ensure_no_mutable_globals.py

    [testenv:storage-service]
    deps =
        -r{env:STORAGE_SERVICE_ROOT}/requirements-dev.txt

    [testenv:migrations-dashboard]
    commands = django-admin makemigrations --check --dry-run

    [testenv:migrations-storage-service]
    deps = {[testenv:storage-service]deps}
    commands = {[testenv:migrations-dashboard]commands}

    [testenv:linting]
    basepython = python3
    deps = pre-commit
    commands = pre-commit run --all-files --show-diff-on-failure
"""
